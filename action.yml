name: build/publish docker & singularity (cvmfs) images

inputs:
  github_token:
    description: 'a PAT so the action can git push to github (images and cvmfs requests)'
    required: true
  image:
    description: |
      the full-qualified image (tagless) --
        include a registry if not storing with dockerhub
        ex: 'ghcr.io/foo/bar', 'foo/bar', etc.
    required: true
  cvmfs_dest_dir:
    description: |
      IF USING CVMFS:
        the CVMFS directory to place the singularity image built from the docker image
    default: ""
    required: false
  free_disk_space:
    description: |
      FOR VERY LARGE IMAGES:
        whether to free disk space on the GitHub runner before building the image
    default: false
    type: boolean
    required: false
  build_platform:
    description: |
      what cpu architecture platform to use when building the image
    default: "linux/amd64"
    required: false


runs:
  using: "composite"

  steps:

    - name: Validate and Prep Image Tag Variables
      run: |
        # step: Validate and Prep Image Tag Variables
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        # validate slash-format
        if [[ ! "$IMAGE" =~ ^[^/]+/[^/]+(/[^/]+)?$ ]]; then
            echo "::error::IMAGE must be in the form 'namespace/image' or 'registry/namespace/image'"
            exit 1
        fi
        
        # validate there's no tag or digest attached
        last_segment="${IMAGE##*/}"
        if [[ "$last_segment" == *:* || "$last_segment" == *@* ]]; then
            echo "::error::IMAGE must not include a tag or digest"
            exit 1
        else
            echo "IMAGE_TAG_NAME=$last_segment" >> "$GITHUB_ENV"
        fi

      shell: bash

    # docker:
    # if: github.event_name != 'delete' && github.event.inputs.do_delete != 'true'

    - uses: jlumbroso/free_disk_space@main  # clears space for image build
      if: ${{ inputs.free_disk_space == 'true' }}
      with:
        docker-images: false  # keep docker otherwise build will re-download them

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)

    - id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.image }}
        tags: |
          # branches (PRs)
          type=sha,prefix={{branch}}-,enable=${{ github.ref_type == 'branch' }}
          # release tags
          type=semver,pattern={{major}},enable=${{ github.ref_type == 'tag' }}
          type=semver,pattern={{major}}.{{minor}},enable=${{ github.ref_type == 'tag' }}
          type=semver,pattern={{major}}.{{minor}}.{{patch}},enable=${{ github.ref_type == 'tag' }}

    - name: Login to Docker Hub
      if: ${{ ! startsWith(inputs.image, 'ghcr.io/') }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: ${{ startsWith(inputs.image, 'ghcr.io/') }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Setup QEMU (if platform requires it)
      if: contains(inputs.build_platform, 'arm')
      uses: docker/setup-qemu-action@v2

    - uses: docker/setup-buildx-action@v2

    - uses: docker/build-push-action@v3
      with:
        context: .
        platforms: ${{ inputs.build_platform }}
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}

    # cvmfs-build:
    # if: github.event_name != 'delete' && github.event.inputs.do_delete != 'true'

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)

    - id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.image }}
        flavor: |
          latest=false
        tags: |
          # we only want to put version/sha-specific images on CVMFS
          # branches (PRs)
          type=sha,prefix={{branch}}-,enable=${{ github.ref_type == 'branch' }}
          # release tags
          type=semver,pattern={{major}}.{{minor}}.{{patch}},enable=${{ github.ref_type == 'tag' }}

    - name: Request Build(s)
      uses: WIPACrepo/build-singularity-cvmfs-action@v2.0
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # so job can git push
        docker_tags: ${{ steps.docker_meta.outputs.tags }}
        dest_dir: ${{ inputs.cvmfs_dest_dir }}  # Required for constructing path pattern

    # cvmfs-removal:
    # if: github.event_name == 'delete' || github.event.inputs.do_delete == 'true'

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)

    - name: CVMFS Request Removal(s)
      uses: WIPACrepo/build-singularity-cvmfs-action@v2.0
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # so job can git push
        delete_image_tags: "${{ env.IMAGE_TAG_NAME }}:${{ github.ref_name }}-[SHA]"
        dest_dir: ${{ inputs.cvmfs_dest_dir }}  # Required for constructing path pattern
